<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xs.database.mapper.DataBaseTableMapper">
    <!--加上二级缓存，虽然大材小用 哈哈，一级缓存就可以，因为我就写了这一个mapper的，
    二级缓存使用在namespace区域-->
    <cache/>
    <!--oracle中long字段处理-->
    <resultMap id="dbMapOracle" type="com.xs.database.entity.DBTableEntity"
               extends="tableMap">
        <collection property="columnEntity" resultMap="colMapOracle">
        </collection>
    </resultMap>
    <resultMap id="colMapOracle" type="com.xs.database.entity.ColumnEntity">
        <id column="columnName" property="columnName" jdbcType="VARCHAR"></id>
        <result column="tableNameC" property="tableName" jdbcType="VARCHAR"></result>
        <result column="columnNameCn" property="columnNameCn" jdbcType="VARCHAR"
                typeHandler="com.xs.database.handler.BatisEncodeHandler"></result>
        <result column="dataType" property="dataType" jdbcType="VARCHAR"></result>
        <result column="nullAble" property="nullAble" jdbcType="VARCHAR"></result>
        <result column="dataLength" property="dataLength" jdbcType="INTEGER"></result>
        <result column="defaultData" property="defaultData"
                jdbcType="LONGVARBINARY"></result>
    </resultMap>


    <resultMap id="dbMap" type="com.xs.database.entity.DBTableEntity"
               extends="tableMap">
        <collection property="columnEntity" resultMap="colMap">
        </collection>
    </resultMap>
    <resultMap id="colMap" type="com.xs.database.entity.ColumnEntity">
        <id column="columnName" property="columnName" jdbcType="VARCHAR"></id>
        <result column="tableNameC" property="tableName" jdbcType="VARCHAR"></result>
        <result column="columnNameCn" property="columnNameCn" jdbcType="VARCHAR"
                typeHandler="com.xs.database.handler.BatisEncodeHandler"></result>
        <result column="dataType" property="dataType" jdbcType="VARCHAR"></result>
        <result column="nullAble" property="nullAble" jdbcType="VARCHAR"></result>
        <result column="dataLength" property="dataLength" jdbcType="INTEGER"></result>
        <result column="defaultData" property="defaultData" jdbcType="VARCHAR"></result>
    </resultMap>

    <resultMap id="tableMap" type="com.xs.database.entity.DBTableEntity">
        <id column="tableName" property="tableName" jdbcType="VARCHAR"></id>
        <result column="tableNameCn" property="tableNameCn" jdbcType="VARCHAR"
                typeHandler="com.xs.database.handler.BatisEncodeHandler"></result>
    </resultMap>


    <!--###################################################################-->
    <select id="getTableListByOracle" resultMap="dbMapOracle">
        SELECT Ss.TABLE_NAME as "tableName",
        T.COMMENTS as "tableNameCn",
        s.table_name as "tableNameC",
        s.COLUMN_NAME as "columnName",
        c.comments as "columnNameCn",
        s.DATA_TYPE as "dataType",
        s.NULLABLE as "nullAble",
        s.DATA_LENGTH as "dataLength", --number
        s.DATA_DEFAULT as "defaultData"--long
        FROM USER_TABLES Ss
        left join USER_TAB_COMMENTS T
        on Ss.TABLE_NAME = T.TABLE_NAME
        left join user_tab_columns S
        on s.TABLE_NAME = Ss.TABLE_NAME
        left join user_col_comments c
        on c.table_name = s.TABLE_NAME
        and c.column_name = s.COLUMN_NAME
        <where>
            t.table_type = 'TABLE'
            <if test="tableName != null and tableName!=''">
                and ss.table_name like #{tableName}
            </if>
        </where>
    </select>

    <select id="getTableListByMysql" resultMap="dbMap">
        SELECT
        t.table_name AS "tableName",
        t.table_comment AS "tableNameCn",
        c.column_name AS "columnName",
        c.column_default AS "defaultData",
        c.is_nullable AS "nullAble",
        c.data_type AS "dataType",
        c.character_maximum_length AS "dataLength",
        c.column_comment AS "columnNameCn"
        FROM
        information_schema.TABLES t
        LEFT JOIN information_schema.COLUMNS c ON t.table_name = c.table_name
        AND t.table_schema = c.table_schema


        <where>
            t.table_schema = (select database())
            <if test="tableName != null and tableName!=''">
                AND t.table_name like #{tableName}
            </if>
        </where>
        ORDER BY
        c.ordinal_position
    </select>

    <select id="testCon" resultType="int">
        select 1 from dual
    </select>
</mapper>